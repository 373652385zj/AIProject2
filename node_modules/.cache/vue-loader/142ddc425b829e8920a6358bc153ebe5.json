{"remainingRequest":"/Volumes/JAKY/温博老师给的任务/网页UI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/JAKY/温博老师给的任务/网页UI/src/ParkingDetector/CheckpointEditor.vue?vue&type=style&index=0&id=5d5ba27f&scoped=true&lang=css&","dependencies":[{"path":"/Volumes/JAKY/温博老师给的任务/网页UI/src/ParkingDetector/CheckpointEditor.vue","mtime":1602938860000},{"path":"/Volumes/JAKY/温博老师给的任务/网页UI/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/JAKY/温博老师给的任务/网页UI/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Volumes/JAKY/温博老师给的任务/网页UI/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Volumes/JAKY/温博老师给的任务/网页UI/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/JAKY/温博老师给的任务/网页UI/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KI2RldGVjdENhbnZhcyB7DQogIHdpZHRoOiAxMDAlOw0KfQ0K"},{"version":3,"sources":["CheckpointEditor.vue"],"names":[],"mappingshBA;AACA;AACA","file":"CheckpointEditor.vue","sourceRoot":"src/ParkingDetector","sourcesContent":["<template>\r\n  <b-card>\r\n    <template v-slot:header>\r\n      识别结果\r\n      <b-button\r\n        class=\"float-right\"\r\n        size=\"sm\"\r\n        variant=\"outline-secondary\"\r\n        v-b-modal.live\r\n        >实时画面</b-button\r\n      >\r\n      <b-modal id=\"live\" title=\"实时画面\" size=\"lg\" ok-only ok-title=\"返回\">\r\n        <b-img :src=\"'http://' + host + '/camera/live'\" fluid-grow />\r\n      </b-modal>\r\n      <b-button @click=\"show()\"></b-button>\r\n    </template>\r\n    <!-- 基于mjpeg流的识别结果图像 -->\r\n    <img\r\n      :src=\"'http://' + host + '/detect/img/' + (editable ? 'box' : 'nobox')\"\r\n      id=\"detectSource\"\r\n      style=\"display: none\"\r\n      crossorigin=\"Anonymous\"\r\n    />\r\n    <!-- UI设计时占位用的猫猫图 -->\r\n    <!-- <img src=\"../assets/720x480.png\" id=\"detectSource\" style=\"display: none;\" /> -->\r\n    <!-- 主画布 -->\r\n    <b-overlay :show=\"preparing\">\r\n      <canvas id=\"detectCanvas\"></canvas>\r\n    </b-overlay>\r\n    <!-- 编辑模式的控制表单 -->\r\n    <div v-if=\"editable\">\r\n      <!-- 编辑模式选择器 -->\r\n      <b-form-radio-group id=\"editModeSelector\" v-model=\"editMode\" class=\"mb-3\">\r\n        <b-form-radio value=\"immediate\">即时编号模式</b-form-radio>\r\n        <b-form-radio value=\"continuals\">连续编号模式</b-form-radio>\r\n      </b-form-radio-group>\r\n      <!-- 即时编号模式：每创建一个点，输入框就获得焦点 -->\r\n      <b-form inline v-if=\"editMode == 'immediate'\" class=\"mb-3\">\r\n        <label for=\"immediate-input\">输入编号</label>\r\n        <b-form-input\r\n          id=\"immediate-input\"\r\n          ref=\"immediate-input\"\r\n          v-model=\"immediate.name\"\r\n          :state=\"immediate.state\"\r\n          @keyup=\"rename\"\r\n        />\r\n      </b-form>\r\n      <!-- 连续编号模式：输入初始值，按顺序递增 -->\r\n      <b-form inline v-if=\"editMode == 'continuals'\" class=\"mb-3\">\r\n        <label for=\"continuals-input\">下一个编号</label>\r\n        <b-form-input\r\n          id=\"continuals-input\"\r\n          v-model=\"continuals.next\"\r\n          :state=\"continuals.state\"\r\n        />\r\n      </b-form>\r\n    </div>\r\n    <!-- 切换编辑模式的按钮 -->\r\n    <b-button\r\n      block\r\n      class=\"mt-3\"\r\n      variant=\"outline-secondary\"\r\n      @click=\"editable = !editable\"\r\n    >\r\n      {{ editable ? \"完成\" : \"编辑\" }}\r\n    </b-button>\r\n    <div style=\"display: none\">\r\n      <img ref=\"conf0\" :src=\"conf0Src\" />\r\n    </div>\r\n  </b-card>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport PubSub from \"pubsub-js\";\r\nimport conf0Src1 from \"@/assets/car.jpg\";\r\n\r\nclass ParkingSpace {\r\n  constructor(x, y, id, name, ctx) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.id = id;\r\n    this.ctx = ctx;\r\n    this.name = name;\r\n    this.radius = 5;\r\n    this.available = true;\r\n    this.highlight = false;\r\n    this.availableCounter = 0;\r\n  }\r\n\r\n  isHover(mouseX, mouseY) {\r\n    // 水平距离或垂直距离大于半径，则一定不可能悬停\r\n    if (\r\n      Math.abs(this.x - mouseX) > this.radius ||\r\n      Math.abs(this.y - mouseY) > this.radius\r\n    ) {\r\n      return false;\r\n    }\r\n    let distance = Math.sqrt(\r\n      (this.x - mouseX) * (this.x - mouseX) +\r\n        (this.y - mouseY) * (this.y - mouseY)\r\n    );\r\n    if (distance > this.radius) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  refreshAvailability(detections) {\r\n    let available = true;\r\n    let stateChanged = false;\r\n    for (let e of detections) {\r\n      let left = e[0];\r\n      let top = e[1];\r\n      let right = left + e[2];\r\n      let bottom = top + e[3];\r\n      if (this.y > top && this.y < bottom && this.x > left && this.x < right) {\r\n        available = false;\r\n        break;\r\n      }\r\n    }\r\n    //模型容易把有车识别成没车，但不容易把没车识别成有车，所以连续识别三次没车才改变状态\r\n    if (available) {\r\n      this.availableCounter++;\r\n      if (this.availableCounter == 3) {\r\n        this.available = true;\r\n        this.availableCounter = 0;\r\n        stateChanged = true;\r\n      }\r\n    } else {\r\n      if (this.available) stateChanged = true;\r\n      this.available = false;\r\n      this.availableCounter = 0;\r\n    }\r\n    return stateChanged;\r\n  }\r\n\r\n  refreshExterior(mouseX, mouseY) {\r\n    this.ctx.beginPath();\r\n    let isHover = this.isHover(mouseX, mouseY);\r\n    let resizeFactor = this.highlight || isHover ? 1.5 : 1;\r\n    this.ctx.arc(\r\n      this.x,\r\n      this.y,\r\n      this.radius * resizeFactor,\r\n      0,\r\n      2 * Math.PI,\r\n      false\r\n    );\r\n    this.ctx.fillStyle = (() => {\r\n      if (this.highlight) return \"#ffa500\";\r\n      if (this.available) return \"#00ff00\";\r\n      return \"#ff0000\";\r\n    })();\r\n    this.ctx.fill();\r\n    if (isHover) {\r\n      this.ctx.lineWidth = 2;\r\n      this.ctx.strokeStyle = this.available ? \"#003300\" : \"#330000\";\r\n      this.ctx.stroke();\r\n    }\r\n  }\r\n}\r\n\r\nclass ParkingSpaceStorage {\r\n  constructor(ctx, host) {\r\n    this.ctx = ctx;\r\n    this.host = host;\r\n    this.storage = new Map();\r\n  }\r\n\r\n  load(data) {\r\n    for (let id in data) {\r\n      this.create(data[id].x, data[id].y, false, id, data[id].name);\r\n    }\r\n  }\r\n\r\n  create(x, y, exportNeeded, id = null, name = null) {\r\n    let newID = id == null ? uuid() : id;\r\n    let newName = name == null ? newID.substring(0, 5) : name;\r\n    this.storage.set(\r\n      newID,\r\n      new ParkingSpace(Math.round(x), Math.round(y), newID, newName, this.ctx)\r\n    );\r\n    PubSub.publish(\"create\", {\r\n      x: Math.round(x),\r\n      y: Math.round(y),\r\n      id: newID,\r\n      name: newName,\r\n    });\r\n    if (exportNeeded) this.export();\r\n    return newID;\r\n  }\r\n\r\n  remove(element) {\r\n    this.storage.delete(element.id);\r\n    PubSub.publish(\"remove\", element.id);\r\n    this.export();\r\n  }\r\n\r\n  forEach(callback) {\r\n    this.storage.forEach(callback);\r\n  }\r\n\r\n  refreshExterior(mouseX, mouseY) {\r\n    this.forEach((ps) => {\r\n      ps.refreshExterior(mouseX, mouseY);\r\n    });\r\n  }\r\n\r\n  refreshAvailability(detections) {\r\n    this.forEach((ps) => {\r\n      let stateChanged = ps.refreshAvailability(detections);\r\n      if (stateChanged) {\r\n        PubSub.publish(\"change\", { id: ps.id, available: ps.available });\r\n      }\r\n    });\r\n  }\r\n\r\n  rename(id, name) {\r\n    let element = this.storage.get(id);\r\n    element.name = name;\r\n    this.storage.set(id, element);\r\n    this.export();\r\n  }\r\n\r\n  highlight(id) {\r\n    this.forEach((ps) => {\r\n      if (ps.id == id) {\r\n        ps.highlight = true;\r\n      } else {\r\n        ps.highlight = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  isDuplicate(name) {\r\n    let duplicate = false;\r\n    this.forEach((ps) => {\r\n      if (ps.name == name) duplicate = true;\r\n    });\r\n    return duplicate;\r\n  }\r\n\r\n  export() {\r\n    let tempStorage = {};\r\n    this.forEach((ps) => {\r\n      tempStorage[ps.id] = { x: ps.x, y: ps.y, name: ps.name };\r\n    });\r\n    axios\r\n      .post(`http://${this.host}/detect/checkpoints`, tempStorage)\r\n      .then((resp) => {\r\n        if (resp.status !== 200) {\r\n          console.error(\"cannot post point data\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: \"ckeckpoint-editor\",\r\n  props: {\r\n    host: String,\r\n  },\r\n  data: function () {\r\n    return {\r\n      //识别结果画布及其上下文\r\n      detectCanvas: null,\r\n      detectCtx: null,\r\n      //车位（检查点）列表\r\n      parkingSpaceStorage: null,\r\n      //detection = [[x, y, w, h], [x, y, w, h], ...]\r\n      detections: null,\r\n      //鼠标位置\r\n      mouseX: 0,\r\n      mouseY: 0,\r\n      //是否在编辑状态\r\n      editable: false,\r\n      //编辑状态相关\r\n      editMode: \"immediate\",\r\n      immediate: {\r\n        ID: \"\",\r\n        name: \"\",\r\n        state: null,\r\n      },\r\n      continuals: {\r\n        next: \"001\",\r\n        state: null,\r\n      },\r\n      //是否还在初始化,“加载中”\r\n      preparing: false,\r\n      conf0Src: conf0Src1,\r\n      carPosition: {\r\n        \"MDAwN-GJmMDl-iN2ViN\": { name: \"0041\", x: 435, y: 124 },\r\n        \"MDExi-IhdbAH-hAj64L\": { name: \"0042\", x: 362, y: 211 },\r\n      },\r\n      emptyPosition: {\r\n          \"1\":{\"x1\":129,\"y1\":113,\"x2\":241,\"y2\":211},\r\n          \"2\":{\"x1\":429,\"y1\":313,\"x2\":441,\"y2\":411}\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    show() {\r\n      alert(this.host);\r\n    },\r\n    rename: function () {\r\n      if (this.parkingSpaceStorage.isDuplicate(this.immediate.name)) {\r\n        this.immediate.state = false;\r\n        return;\r\n      }\r\n      this.immediate.state = null;\r\n      PubSub.publish(\"rename\", {\r\n        id: this.immediate.ID,\r\n        name: this.immediate.name,\r\n      });\r\n    },\r\n    continualsNext: function () {\r\n      let digit = this.continuals.next.length;\r\n      let newNext = `${Number.parseInt(this.continuals.next) + 1}`;\r\n      while (newNext.length < digit) newNext = `0${newNext}`;\r\n      this.continuals.next = newNext;\r\n    },\r\n  },\r\n  mounted: async function () {\r\n    //创建对识别结果画布及其上下文的引用\r\n    this.detectCanvas = document.getElementById(\"detectCanvas\");\r\n    this.detectCanvas.width = 720;\r\n    this.detectCanvas.height = 480;\r\n    this.detectCtx = document.getElementById(\"detectCanvas\").getContext(\"2d\");\r\n    //初始化检查点储存\r\n    this.parkingSpaceStorage = new ParkingSpaceStorage(\r\n      this.detectCtx,\r\n      this.host\r\n    );\r\n    ////////////\r\n    var img = this.$refs.conf0;\r\n    img.onload = () => {\r\n      this.detectCtx.drawImage(img, 0, 0);\r\n    //   for (const key in this.carPosition) {\r\n    //     this.detectCtx.beginPath();\r\n    //     this.detectCtx.arc(this.carPosition[key].x, this.carPosition[key].x, 10, 0, 2 * Math.PI);\r\n    //     this.detectCtx.fillStyle = 'rgba(0,0,255,1)';       //设置填充颜色\r\n    //     // this.detectCtx.fill();  \r\n    //   }\r\n      for (const key in this.emptyPosition) {\r\n        this.detectCtx.fillRect(\r\n            this.emptyPosition[key].x1,\r\n            this.emptyPosition[key].y1,\r\n            this.emptyPosition[key].x2,\r\n            this.emptyPosition[key].y2,\r\n        )\r\n        this.detectCtx.fillStyle='rgba(0,255,0,1)'\r\n      }\r\n    };\r\n    ////////////\r\n    // console.log(this.carPosition[\"MDAwN-GJmMDl-iN2ViN\"].x);\r\n\r\n    // console.log(this.detectCtx);\r\n    //获取服务器端缓存的检查点信息\r\n    await axios\r\n      .get(`http://${this.host}/camera/detect/checkpoints`)\r\n      .then((resp) => {\r\n        if (resp.status == 200) {\r\n          this.parkingSpaceStorage.load(resp.data);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.error(`${err}`);\r\n      });\r\n\r\n    //获取识别框\r\n    await axios\r\n      .get(`http://${this.host}/camera/detect/box`)\r\n      .then((resp) => {\r\n        if (resp.status == 200) {\r\n          this.detections = resp.data;\r\n        } else {\r\n          this.detections = [];\r\n          console.error(\"cannot fetch detections\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.error(`${err}`);\r\n      });\r\n\r\n    //当图像源宽度不是0（即已加载好）时取消\"准备中\"遮罩\r\n    let prepareChecker = setInterval(() => {\r\n      if (document.getElementById(\"detectSource\").width != 0) {\r\n        clearInterval(prepareChecker);\r\n        this.preparing = false;\r\n      }\r\n    }, 50);\r\n\r\n    //每50毫秒刷新一次画布\r\n    let lastRefreshTimestamp = 0;\r\n    let refreshCanvas = (time) => {\r\n      if (time - lastRefreshTimestamp > 50) {\r\n        lastRefreshTimestamp = time;\r\n        let source = document.getElementById(\"detectSource\");\r\n        try {\r\n          this.detectCtx.drawImage(source, 0, 0);\r\n        } catch (error) {\r\n          /*ignore warning*/\r\n        }\r\n        this.parkingSpaceStorage.refreshExterior(this.mouseX, this.mouseY);\r\n      }\r\n      requestAnimationFrame(refreshCanvas);\r\n    };\r\n    requestAnimationFrame(refreshCanvas);\r\n\r\n    //每4秒获取一次识别框并刷新占用情况\r\n    let lastFetchTimestamp = 0;\r\n    let fetchDetection = async (time) => {\r\n      if (time - lastFetchTimestamp > 4000) {\r\n        lastFetchTimestamp = time;\r\n        await axios\r\n          .get(`http://${this.host}/camera/detect/box`)\r\n          .then((resp) => {\r\n            if (resp.status == 200) {\r\n              this.detections = resp.data;\r\n            } else {\r\n              this.detections = [];\r\n              console.error(\"cannot fetch detections\");\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            console.error(err);\r\n          });\r\n        this.parkingSpaceStorage.refreshAvailability(this.detections);\r\n      }\r\n      requestAnimationFrame(fetchDetection);\r\n    };\r\n    requestAnimationFrame(fetchDetection);\r\n\r\n    //取消画布点击右键时弹出右键菜单\r\n    this.detectCanvas.addEventListener(\"contextmenu\", (event) => {\r\n      event.preventDefault();\r\n    });\r\n\r\n    //鼠标抬起时尝试创建新检查点\r\n    this.detectCanvas.addEventListener(\"mouseup\", (event) => {\r\n      if (!this.editable) return;\r\n      if (this.mouseX < 720 && this.mouseY < 480) {\r\n        let newParkingSpace = true;\r\n        if (event.button == 0) {\r\n          //左键单击时\r\n          //如果没有悬停在现有检查点上，则创建一个新的检查点\r\n          this.parkingSpaceStorage.forEach((ps) => {\r\n            if (ps.isHover(this.mouseX, this.mouseY)) {\r\n              newParkingSpace = false;\r\n            }\r\n          });\r\n          if (newParkingSpace) {\r\n            if (this.editMode == \"immediate\") {\r\n              this.immediate.ID = this.parkingSpaceStorage.create(\r\n                this.mouseX,\r\n                this.mouseY,\r\n                true\r\n              );\r\n              this.$refs[\"immediate-input\"].focus();\r\n            }\r\n            if (this.editMode == \"continuals\") {\r\n              this.parkingSpaceStorage.create(\r\n                this.mouseX,\r\n                this.mouseY,\r\n                true,\r\n                null,\r\n                this.continuals.next\r\n              );\r\n              this.continualsNext();\r\n            }\r\n          }\r\n        } else if (event.button == 2) {\r\n          //右键单击时\r\n          //如果悬停在现有检查点上，则删除这个检查点\r\n          this.parkingSpaceStorage.forEach((ps) => {\r\n            if (ps.isHover(this.mouseX, this.mouseY)) {\r\n              this.parkingSpaceStorage.remove(ps);\r\n            }\r\n          });\r\n        } else if (event.button == 1) {\r\n          console.log(`(${this.mouseX}, ${this.mouseY})`);\r\n        }\r\n      }\r\n    });\r\n\r\n    //鼠标移动时刷新储存的鼠标位置\r\n    this.detectCanvas.addEventListener(\"mousemove\", (event) => {\r\n      if (!this.editable) return;\r\n      let rect = this.detectCanvas.getBoundingClientRect();\r\n      let scale = 720 / rect.width;\r\n      this.mouseX = (event.clientX - rect.left) * scale;\r\n      this.mouseY = (event.clientY - rect.top) * scale;\r\n    });\r\n\r\n    this.detectCanvas.addEventListener(\"mousedown\", () => {\r\n      if (this.editMode == \"immediate\") {\r\n        this.immediate.ID = \"\";\r\n        this.immediate.name = \"\";\r\n      }\r\n    });\r\n\r\n    //事件处理\r\n    PubSub.subscribe(\"rename\", (msg, payload) => {\r\n      this.parkingSpaceStorage.rename(payload.id, payload.name);\r\n    });\r\n    PubSub.subscribe(\"highlight\", (msg, id) => {\r\n      this.parkingSpaceStorage.highlight(id);\r\n    });\r\n\r\n    /**\r\n     * Provides requestAnimationFrame in a cross browser way.\r\n     * http://paulirish.com/2011/requestanimationframe-for-smart-animating/\r\n     */\r\n    if (!window.requestAnimationFrame) {\r\n      window.requestAnimationFrame = (function () {\r\n        return (\r\n          window.webkitRequestAnimationFrame ||\r\n          window.mozRequestAnimationFrame ||\r\n          window.oRequestAnimationFrame ||\r\n          window.msRequestAnimationFrame ||\r\n          function (callback) {\r\n            window.setTimeout(callback, 1000 / 60);\r\n          }\r\n        );\r\n      })();\r\n    }\r\n  },\r\n  watch: {\r\n    editable(newVal) {\r\n      if (newVal) PubSub.publish(\"edit-start\");\r\n      else PubSub.publish(\"edit-end\");\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#detectCanvas {\r\n  width: 100%;\r\n}\r\n</style>\r\n"]}]}